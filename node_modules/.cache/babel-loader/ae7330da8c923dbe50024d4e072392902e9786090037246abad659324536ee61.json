{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\n_c = WhiteboardContainer;\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n_c2 = DotGrid;\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst Whiteboard = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 / zoom),\n    y: position.y % (24 / zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 / zoom;\n  const dotSize = 1 / zoom;\n  const handleDoubleClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const newPosition = {\n      x: event.clientX - reactFlowBounds.left - position.x,\n      y: event.clientY - reactFlowBounds.top - position.y\n    };\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: {\n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position]);\n  const onConnect = useCallback(params => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(DotGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"dot-pattern\",\n            x: patternOffset.x,\n            y: patternOffset.y,\n            width: patternSize,\n            height: patternSize,\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: dotSize,\n              cy: dotSize,\n              r: dotSize,\n              fill: \"#d2d2d2\",\n              fillOpacity: \"0.2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"url(#dot-pattern)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      onDoubleClick: handleDoubleClick,\n      zoomOnDoubleClick: false,\n      fitView: false,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onNodeDragStart: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: true\n          }\n        } : n));\n      },\n      onNodeDragStop: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: false\n          }\n        } : n));\n      },\n      onMove: (_, viewState) => {\n        setPosition({\n          x: viewState.x,\n          y: viewState.y\n        });\n        setZoom(viewState.zoom);\n      },\n      children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"W/tpeAfSQG0/cq54TPuU+ERW0Y8=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c3 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"DotGrid\");\n$RefreshReg$(_c3, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","useNodesState","useEdgesState","Controls","styled","CustomNode","jsxDEV","_jsxDEV","WhiteboardContainer","div","props","theme","terminal","bg","_c","DotGrid","_c2","nodeTypes","custom","Whiteboard","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","position","setPosition","x","y","zoom","setZoom","patternOffset","patternSize","dotSize","handleDoubleClick","event","preventDefault","stopPropagation","reactFlowBounds","currentTarget","getBoundingClientRect","newPosition","clientX","left","clientY","top","newNodeId","Date","now","toString","newNode","id","type","data","content","onRemove","filter","n","onConnect","params","children","width","height","patternUnits","cx","cy","r","fill","fillOpacity","fileName","_jsxFileName","lineNumber","columnNumber","onDoubleClick","zoomOnDoubleClick","fitView","style","onNodeDragStart","_","node","map","isDragging","onNodeDragStop","onMove","viewState","_c3","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState,\n  Controls\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\n\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nconst Whiteboard = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 / zoom),\n    y: position.y % (24 / zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 / zoom;\n  const dotSize = 1 / zoom;\n\n  const handleDoubleClick = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const newPosition = {\n      x: event.clientX - reactFlowBounds.left - position.x,\n      y: event.clientY - reactFlowBounds.top - position.y,\n    };\n\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: { \n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position]);\n\n  const onConnect = useCallback((params) => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  return (\n    <WhiteboardContainer>\n      <DotGrid>\n        <svg>\n          <defs>\n            <pattern \n              id=\"dot-pattern\" \n              x={patternOffset.x} \n              y={patternOffset.y} \n              width={patternSize} \n              height={patternSize} \n              patternUnits=\"userSpaceOnUse\"\n            >\n              <circle \n                cx={dotSize} \n                cy={dotSize} \n                r={dotSize} \n                fill=\"#d2d2d2\" \n                fillOpacity=\"0.2\" \n              />\n            </pattern>\n          </defs>\n          <rect width=\"100%\" height=\"100%\" fill=\"url(#dot-pattern)\" />\n        </svg>\n      </DotGrid>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        onDoubleClick={handleDoubleClick}\n        zoomOnDoubleClick={false}\n        fitView={false}\n        style={{ width: '100%', height: '100%' }}\n        onNodeDragStart={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: true }}\n                : n\n            )\n          );\n        }}\n        onNodeDragStop={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: false }}\n                : n\n            )\n          );\n        }}\n        onMove={(_, viewState) => {\n          setPosition({ x: viewState.x, y: viewState.y });\n          setZoom(viewState.zoom);\n        }}\n      >\n        <Controls />\n      </ReactFlow>\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,SAAS,IACdC,aAAa,EACbC,aAAa,EACbC,QAAQ,QACH,WAAW;AAClB,OAAO,0BAA0B;AACjC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,UAAU,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,mBAAmB,GAAGJ,MAAM,CAACK,GAAG;AACtC;AACA;AACA;AACA;AACA,gBAAgBC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,QAAQ,CAACC,EAAE;AAChD,CAAC;;AAED;AAAAC,EAAA,GARMN,mBAAmB;AASzB,MAAMO,OAAO,GAAGX,MAAM,CAACK,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACO,GAAA,GAdID,OAAO;AAgBb,MAAME,SAAS,GAAG;EAChBC,MAAM,EAAEb;AACV,CAAC;AAED,MAAMc,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGtB,aAAa,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGxB,aAAa,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC;IAAE+B,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACxD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACA,MAAMmC,aAAa,GAAG;IACpBJ,CAAC,EAAEF,QAAQ,CAACE,CAAC,IAAI,EAAE,GAAGE,IAAI,CAAC;IAC3BD,CAAC,EAAEH,QAAQ,CAACG,CAAC,IAAI,EAAE,GAAGC,IAAI;EAC5B,CAAC;;EAED;EACA,MAAMG,WAAW,GAAG,EAAE,GAAGH,IAAI;EAC7B,MAAMI,OAAO,GAAG,CAAC,GAAGJ,IAAI;EAExB,MAAMK,iBAAiB,GAAGrC,WAAW,CAAEsC,KAAK,IAAK;IAC/CA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBD,KAAK,CAACE,eAAe,CAAC,CAAC;IAEvB,MAAMC,eAAe,GAAGH,KAAK,CAACI,aAAa,CAACC,qBAAqB,CAAC,CAAC;IACnE,MAAMC,WAAW,GAAG;MAClBd,CAAC,EAAEQ,KAAK,CAACO,OAAO,GAAGJ,eAAe,CAACK,IAAI,GAAGlB,QAAQ,CAACE,CAAC;MACpDC,CAAC,EAAEO,KAAK,CAACS,OAAO,GAAGN,eAAe,CAACO,GAAG,GAAGpB,QAAQ,CAACG;IACpD,CAAC;IAED,MAAMkB,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACvC,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEL,SAAS;MACbM,IAAI,EAAE,QAAQ;MACd3B,QAAQ,EAAEgB,WAAW;MACrBY,IAAI,EAAE;QACJC,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAEA,CAAA,KAAM;UACdnC,QAAQ,CAACD,KAAK,IAAIA,KAAK,CAACqC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKL,SAAS,CAAC,CAAC;QAC1D;MACF;IACF,CAAC;IAED1B,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAK,EAAE+B,OAAO,CAAC,CAAC;EACxC,CAAC,EAAE,CAACzB,QAAQ,CAAC,CAAC;EAEd,MAAMiC,SAAS,GAAG7D,WAAW,CAAE8D,MAAM,IAAK;IACxCpC,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAK,EAAEqC,MAAM,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtD,OAAA,CAACC,mBAAmB;IAAAsD,QAAA,gBAClBvD,OAAA,CAACQ,OAAO;MAAA+C,QAAA,eACNvD,OAAA;QAAAuD,QAAA,gBACEvD,OAAA;UAAAuD,QAAA,eACEvD,OAAA;YACE8C,EAAE,EAAC,aAAa;YAChBxB,CAAC,EAAEI,aAAa,CAACJ,CAAE;YACnBC,CAAC,EAAEG,aAAa,CAACH,CAAE;YACnBiC,KAAK,EAAE7B,WAAY;YACnB8B,MAAM,EAAE9B,WAAY;YACpB+B,YAAY,EAAC,gBAAgB;YAAAH,QAAA,eAE7BvD,OAAA;cACE2D,EAAE,EAAE/B,OAAQ;cACZgC,EAAE,EAAEhC,OAAQ;cACZiC,CAAC,EAAEjC,OAAQ;cACXkC,IAAI,EAAC,SAAS;cACdC,WAAW,EAAC;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPnE,OAAA;UAAMwD,KAAK,EAAC,MAAM;UAACC,MAAM,EAAC,MAAM;UAACK,IAAI,EAAC;QAAmB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACVnE,OAAA,CAACP,SAAS;MACRqB,KAAK,EAAEA,KAAM;MACbG,KAAK,EAAEA,KAAM;MACbD,aAAa,EAAEA,aAAc;MAC7BG,aAAa,EAAEA,aAAc;MAC7BkC,SAAS,EAAEA,SAAU;MACrB3C,SAAS,EAAEA,SAAU;MACrB0D,aAAa,EAAEvC,iBAAkB;MACjCwC,iBAAiB,EAAE,KAAM;MACzBC,OAAO,EAAE,KAAM;MACfC,KAAK,EAAE;QAAEf,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO,CAAE;MACzCe,eAAe,EAAEA,CAACC,CAAC,EAAEC,IAAI,KAAK;QAC5B3D,QAAQ,CAACD,KAAK,IACZA,KAAK,CAAC6D,GAAG,CAACvB,CAAC,IACTA,CAAC,CAACN,EAAE,KAAK4B,IAAI,CAAC5B,EAAE,GACZ;UAAE,GAAGM,CAAC;UAAEJ,IAAI,EAAE;YAAE,GAAGI,CAAC,CAACJ,IAAI;YAAE4B,UAAU,EAAE;UAAK;QAAC,CAAC,GAC9CxB,CACN,CACF,CAAC;MACH,CAAE;MACFyB,cAAc,EAAEA,CAACJ,CAAC,EAAEC,IAAI,KAAK;QAC3B3D,QAAQ,CAACD,KAAK,IACZA,KAAK,CAAC6D,GAAG,CAACvB,CAAC,IACTA,CAAC,CAACN,EAAE,KAAK4B,IAAI,CAAC5B,EAAE,GACZ;UAAE,GAAGM,CAAC;UAAEJ,IAAI,EAAE;YAAE,GAAGI,CAAC,CAACJ,IAAI;YAAE4B,UAAU,EAAE;UAAM;QAAC,CAAC,GAC/CxB,CACN,CACF,CAAC;MACH,CAAE;MACF0B,MAAM,EAAEA,CAACL,CAAC,EAAEM,SAAS,KAAK;QACxB1D,WAAW,CAAC;UAAEC,CAAC,EAAEyD,SAAS,CAACzD,CAAC;UAAEC,CAAC,EAAEwD,SAAS,CAACxD;QAAE,CAAC,CAAC;QAC/CE,OAAO,CAACsD,SAAS,CAACvD,IAAI,CAAC;MACzB,CAAE;MAAA+B,QAAA,eAEFvD,OAAA,CAACJ,QAAQ;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE1B,CAAC;AAACtD,EAAA,CA7GID,UAAU;EAAA,QAC2BlB,aAAa,EACbC,aAAa;AAAA;AAAAqF,GAAA,GAFlDpE,UAAU;AA+GhB,eAAeA,UAAU;AAAC,IAAAL,EAAA,EAAAE,GAAA,EAAAuE,GAAA;AAAAC,YAAA,CAAA1E,EAAA;AAAA0E,YAAA,CAAAxE,GAAA;AAAAwE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}