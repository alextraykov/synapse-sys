{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls, ConnectionLineType, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\n_c = WhiteboardContainer;\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\n_c2 = DotGrid;\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n_c3 = LoadingGrid;\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.4;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\n_c4 = LoadingDot;\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\n_c5 = RippleDot;\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n_c6 = VignetteOverlay;\nconst nodeTypes = {\n  custom: CustomNode\n};\n\n// Add default edge properties with arrow marker and offset\nconst defaultEdgeOptions = {\n  type: 'step',\n  style: {\n    strokeWidth: 3,\n    stroke: '#0EF928'\n  },\n  markerEnd: {\n    type: MarkerType.Arrow,\n    width: 20,\n    height: 20,\n    color: '#0EF928'\n  },\n  animated: true,\n  sourcePosition: {\n    x: 0,\n    y: 0\n  },\n  // Start from edge, no padding offset\n  targetPosition: {\n    x: 0,\n    y: 0\n  } // End at edge, no padding offset\n};\nconst Whiteboard = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({\n        x,\n        y\n      });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n  const handleDoubleClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n    setRippleCenter({\n      x: dotX * zoom + position.x,\n      y: dotY * zoom + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom\n    };\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: {\n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n  const onConnect = useCallback(params => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  // Add ripple effect to the grid\n  const renderRipple = () => {\n    if (!showRipple || !rippleCenter) return null;\n    const rippleDots = [];\n    for (let y = -3; y <= 2; y++) {\n      for (let x = -3; x <= 2; x++) {\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance <= 3) {\n          rippleDots.push(/*#__PURE__*/_jsxDEV(RippleDot, {\n            cx: rippleCenter.x + x * 24 * zoom,\n            cy: rippleCenter.y + y * 24 * zoom,\n            r: dotSize,\n            delay: distance * 0.05\n          }, `ripple-${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n    return rippleDots;\n  };\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(VignetteOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      nodeCount: nodes.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoadingGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        children: dots.map(({\n          x,\n          y\n        }, i) => {\n          const distance = Math.sqrt(x * x + y * y);\n          return /*#__PURE__*/_jsxDEV(LoadingDot, {\n            cx: x * 24 + 1,\n            cy: y * 24 + 1,\n            r: 1,\n            fill: \"#ababab\",\n            delay: distance * 0.05\n          }, `${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DotGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"dot-pattern\",\n            x: patternOffset.x,\n            y: patternOffset.y,\n            width: patternSize,\n            height: patternSize,\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: dotSize,\n              cy: dotSize,\n              r: dotSize,\n              fill: \"#ababab\",\n              fillOpacity: \"0.4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"url(#dot-pattern)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), renderRipple()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      onDoubleClick: handleDoubleClick,\n      zoomOnDoubleClick: false,\n      fitView: false,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onNodeDragStart: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: true\n          }\n        } : n));\n      },\n      onNodeDragStop: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: false\n          }\n        } : n));\n      },\n      onMove: (_, viewState) => {\n        setPosition({\n          x: viewState.x,\n          y: viewState.y\n        });\n        setZoom(viewState.zoom);\n      },\n      defaultEdgeOptions: defaultEdgeOptions,\n      connectionLineType: ConnectionLineType.Step,\n      connectionLineStyle: {\n        strokeWidth: 3,\n        stroke: '#0EF928',\n        opacity: 0.5\n      },\n      connectionStartStyle: {\n        transform: 'translate(0, 0)' // No padding offset\n      },\n      connectionEndStyle: {\n        transform: 'translate(0, 0)' // No padding offset\n      },\n      connectionRadius: 1,\n      children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"tPGnp6zHZUFH8NH/5kMQu7Et+lU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c7 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"DotGrid\");\n$RefreshReg$(_c3, \"LoadingGrid\");\n$RefreshReg$(_c4, \"LoadingDot\");\n$RefreshReg$(_c5, \"RippleDot\");\n$RefreshReg$(_c6, \"VignetteOverlay\");\n$RefreshReg$(_c7, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","useNodesState","useEdgesState","Controls","ConnectionLineType","MarkerType","styled","CustomNode","Navbar","jsxDEV","_jsxDEV","WhiteboardContainer","div","props","theme","terminal","bg","_c","DotGrid","_c2","LoadingGrid","_c3","LoadingDot","circle","delay","_c4","RippleDot","_c5","VignetteOverlay","_c6","nodeTypes","custom","defaultEdgeOptions","type","style","strokeWidth","stroke","markerEnd","Arrow","width","height","color","animated","sourcePosition","x","y","targetPosition","Whiteboard","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","position","setPosition","zoom","setZoom","isLoading","setIsLoading","rippleCenter","setRippleCenter","showRipple","setShowRipple","gridSize","cols","Math","ceil","window","innerWidth","rows","innerHeight","dots","push","timer","setTimeout","sqrt","clearTimeout","patternOffset","patternSize","dotSize","handleDoubleClick","event","preventDefault","stopPropagation","reactFlowBounds","currentTarget","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","dotX","round","dotY","newPosition","newNodeId","Date","now","toString","newNode","id","data","content","onRemove","filter","n","onConnect","params","renderRipple","rippleDots","distance","cx","cy","r","fileName","_jsxFileName","lineNumber","columnNumber","children","nodeCount","length","map","i","fill","patternUnits","fillOpacity","onDoubleClick","zoomOnDoubleClick","fitView","onNodeDragStart","_","node","isDragging","onNodeDragStop","onMove","viewState","connectionLineType","Step","connectionLineStyle","opacity","connectionStartStyle","transform","connectionEndStyle","connectionRadius","_c7","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState,\n  Controls,\n  ConnectionLineType,\n  MarkerType,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\n\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.4;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\n// Add default edge properties with arrow marker and offset\nconst defaultEdgeOptions = {\n  type: 'step',\n  style: {\n    strokeWidth: 3,\n    stroke: '#0EF928'\n  },\n  markerEnd: {\n    type: MarkerType.Arrow,\n    width: 20,\n    height: 20,\n    color: '#0EF928'\n  },\n  animated: true,\n  sourcePosition: { x: 0, y: 0 },  // Start from edge, no padding offset\n  targetPosition: { x: 0, y: 0 }   // End at edge, no padding offset\n};\n\nconst Whiteboard = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({ x, y });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n\n  const handleDoubleClick = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n\n    setRippleCenter({ \n      x: (dotX * zoom) + position.x,\n      y: (dotY * zoom) + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom,\n    };\n\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: { \n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n\n  const onConnect = useCallback((params) => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  // Add ripple effect to the grid\n  const renderRipple = () => {\n    if (!showRipple || !rippleCenter) return null;\n\n    const rippleDots = [];\n    for (let y = -3; y <= 2; y++) {\n      for (let x = -3; x <= 2; x++) {\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance <= 3) {\n          rippleDots.push(\n            <RippleDot\n              key={`ripple-${x}-${y}`}\n              cx={rippleCenter.x + ((x * 24) * zoom)}\n              cy={rippleCenter.y + ((y * 24) * zoom)}\n              r={dotSize}\n              delay={distance * 0.05}\n            />\n          );\n        }\n      }\n    }\n    return rippleDots;\n  };\n\n  return (\n    <WhiteboardContainer>\n      <VignetteOverlay />\n      <Navbar nodeCount={nodes.length} />\n      {isLoading ? (\n        <LoadingGrid>\n          <svg width=\"100%\" height=\"100%\">\n            {dots.map(({ x, y }, i) => {\n              const distance = Math.sqrt(x * x + y * y);\n              return (\n                <LoadingDot\n                  key={`${x}-${y}`}\n                  cx={x * 24 + 1}\n                  cy={y * 24 + 1}\n                  r={1}\n                  fill=\"#ababab\"\n                  delay={distance * 0.05}\n                />\n              );\n            })}\n          </svg>\n        </LoadingGrid>\n      ) : (\n        <DotGrid>\n          <svg>\n            <defs>\n              <pattern \n                id=\"dot-pattern\" \n                x={patternOffset.x} \n                y={patternOffset.y} \n                width={patternSize} \n                height={patternSize} \n                patternUnits=\"userSpaceOnUse\"\n              >\n                <circle \n                  cx={dotSize} \n                  cy={dotSize} \n                  r={dotSize} \n                  fill=\"#ababab\" \n                  fillOpacity=\"0.4\"\n                />\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#dot-pattern)\" />\n            {renderRipple()}\n          </svg>\n        </DotGrid>\n      )}\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        onDoubleClick={handleDoubleClick}\n        zoomOnDoubleClick={false}\n        fitView={false}\n        style={{ width: '100%', height: '100%' }}\n        onNodeDragStart={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: true }}\n                : n\n            )\n          );\n        }}\n        onNodeDragStop={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: false }}\n                : n\n            )\n          );\n        }}\n        onMove={(_, viewState) => {\n          setPosition({ x: viewState.x, y: viewState.y });\n          setZoom(viewState.zoom);\n        }}\n        defaultEdgeOptions={defaultEdgeOptions}\n        connectionLineType={ConnectionLineType.Step}\n        connectionLineStyle={{\n          strokeWidth: 3,\n          stroke: '#0EF928',\n          opacity: 0.5\n        }}\n        connectionStartStyle={{\n          transform: 'translate(0, 0)'  // No padding offset\n        }}\n        connectionEndStyle={{\n          transform: 'translate(0, 0)'  // No padding offset\n        }}\n        connectionRadius={1}\n      >\n        <Controls />\n      </ReactFlow>\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}