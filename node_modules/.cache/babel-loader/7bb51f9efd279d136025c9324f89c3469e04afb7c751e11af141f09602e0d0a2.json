{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls, MarkerType, getSmoothStepPath } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\nimport CustomEdge from './CustomEdge';\nimport CustomConnectionLine from './CustomConnectionLine';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\n_c = WhiteboardContainer;\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\n_c2 = DotGrid;\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n_c3 = LoadingGrid;\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.4;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\n_c4 = LoadingDot;\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n\n// Fix styled component using a transient prop\n_c5 = VignetteOverlay;\nconst AnimatedComponent = styled.div`\n  animation: ${props => props.$delay ? `fadeIn ${props.$delay}s` : 'none'};\n  // other styles...\n`;\n\n// Fix the edge implementation (rename or replace the existing one)\nconst TerminalEdge = ({\n  id,\n  source,\n  target,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  data,\n  style = {}\n}) => {\n  // Calculate the path\n  const [edgePath, labelX, labelY] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    borderRadius: 16\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      style: {\n        stroke: 'rgba(14, 249, 40, 0.2)',\n        strokeWidth: 6,\n        filter: 'blur(4px)'\n      },\n      d: edgePath,\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      id: id,\n      style: {\n        stroke: '#0EF928',\n        strokeWidth: 2,\n        strokeDasharray: '5,5',\n        ...style\n      },\n      className: \"react-flow__edge-path\",\n      d: edgePath,\n      markerEnd: \"url(#terminal-arrow)\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), (data === null || data === void 0 ? void 0 : data.label) && /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n      width: 100,\n      height: 40,\n      x: labelX - 50,\n      y: labelY - 20,\n      className: \"edgebutton-foreignobject\",\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#000',\n          color: '#0EF928',\n          padding: '4px 8px',\n          borderRadius: '4px',\n          fontFamily: 'VT323, monospace',\n          fontSize: '14px',\n          border: '1px solid #0EF928',\n          textAlign: 'center',\n          boxShadow: '0 0 8px rgba(14, 249, 40, 0.5)'\n        },\n        children: data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_c6 = TerminalEdge;\nconst Whiteboard = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n  const [selectedEdges, setSelectedEdges] = useState([]);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({\n        x,\n        y\n      });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n  const handleDoubleClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n    setRippleCenter({\n      x: dotX * zoom + position.x,\n      y: dotY * zoom + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom\n    };\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: {\n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n\n  // Define edge types with our renamed component\n  const edgeTypes = useMemo(() => ({\n    terminal: TerminalEdge\n  }), []);\n\n  // Updated onConnect to use the renamed edge type\n  const onConnect = useCallback(params => {\n    setEdges(edges => [...edges, {\n      ...params,\n      type: 'terminal',\n      // Use renamed edge type\n      animated: true,\n      data: {\n        label: 'connection'\n      },\n      style: {\n        stroke: '#0EF928',\n        strokeDasharray: '5,5'\n      }\n    }]);\n  }, []);\n\n  // Memoize nodeTypes and edgeTypes to prevent recreation on each render\n  const nodeTypes = useMemo(() => ({\n    custom: CustomNode\n  }), []);\n\n  // Handle edge click\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdges(prev => prev.includes(edge.id) ? prev.filter(id => id !== edge.id) : [...prev, edge.id]);\n  }, []);\n\n  // Process edges with selection state\n  const processedEdges = useMemo(() => {\n    return edges.map(edge => {\n      const isSelected = selectedEdges.includes(edge.id);\n      return {\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: isSelected ? '#ffffff' : '#0EF928',\n          strokeWidth: isSelected ? 3 : 2,\n          filter: isSelected ? 'drop-shadow(0 0 12px rgba(255, 255, 255, 0.7))' : 'drop-shadow(0 0 8px rgba(14, 249, 40, 0.5))'\n        }\n      };\n    });\n  }, [edges, selectedEdges]);\n\n  // Handle canvas click to clear selection\n  const onPaneClick = useCallback(() => {\n    setSelectedEdges([]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(VignetteOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      nodeCount: nodes.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoadingGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        children: dots.map(({\n          x,\n          y\n        }, i) => {\n          const distance = Math.sqrt(x * x + y * y);\n          return /*#__PURE__*/_jsxDEV(LoadingDot, {\n            cx: x * 24 + 1,\n            cy: y * 24 + 1,\n            r: 1,\n            fill: \"#ababab\",\n            delay: distance * 0.05\n          }, `${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DotGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"dot-pattern\",\n            x: patternOffset.x,\n            y: patternOffset.y,\n            width: patternSize,\n            height: patternSize,\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: dotSize,\n              cy: dotSize,\n              r: dotSize,\n              fill: \"#ababab\",\n              fillOpacity: \"0.4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"url(#dot-pattern)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: processedEdges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onEdgeClick: onEdgeClick,\n      onPaneClick: onPaneClick,\n      nodeTypes: nodeTypes,\n      edgeTypes: edgeTypes,\n      onDoubleClick: handleDoubleClick,\n      zoomOnDoubleClick: false,\n      fitView: false,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onNodeDragStart: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: true\n          }\n        } : n));\n      },\n      onNodeDragStop: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: false\n          }\n        } : n));\n      },\n      onMove: (_, viewState) => {\n        setPosition({\n          x: viewState.x,\n          y: viewState.y\n        });\n        setZoom(viewState.zoom);\n      },\n      connectionLineComponent: CustomConnectionLine,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          width: 0,\n          height: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"marker\", {\n            id: \"terminal-arrow\",\n            viewBox: \"0 0 10 10\",\n            refX: \"8\",\n            refY: \"5\",\n            markerWidth: \"6\",\n            markerHeight: \"6\",\n            orient: \"auto-start-reverse\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M 0 0 L 10 5 L 0 10 z\",\n              fill: \"#0EF928\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n        children: `\n            @keyframes flowAnimation {\n              from {\n                stroke-dashoffset: 20;\n              }\n              to {\n                stroke-dashoffset: 0;\n              }\n            }\n            \n            .react-flow__edge-path {\n              animation: flowAnimation 1s linear infinite;\n            }\n          `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"DVldCO1lMwSwHSrVpO2WsEGB6kQ=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c7 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"DotGrid\");\n$RefreshReg$(_c3, \"LoadingGrid\");\n$RefreshReg$(_c4, \"LoadingDot\");\n$RefreshReg$(_c5, \"VignetteOverlay\");\n$RefreshReg$(_c6, \"TerminalEdge\");\n$RefreshReg$(_c7, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","useMemo","ReactFlow","useNodesState","useEdgesState","Controls","MarkerType","getSmoothStepPath","styled","CustomNode","Navbar","CustomEdge","CustomConnectionLine","jsxDEV","_jsxDEV","Fragment","_Fragment","WhiteboardContainer","div","props","theme","terminal","bg","_c","DotGrid","_c2","LoadingGrid","_c3","LoadingDot","circle","delay","_c4","RippleDot","VignetteOverlay","_c5","AnimatedComponent","$delay","TerminalEdge","id","source","target","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","data","style","edgePath","labelX","labelY","borderRadius","children","stroke","strokeWidth","filter","d","fill","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","className","markerEnd","label","width","height","x","y","requiredExtensions","background","color","padding","fontFamily","fontSize","border","textAlign","boxShadow","_c6","Whiteboard","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","position","setPosition","zoom","setZoom","isLoading","setIsLoading","rippleCenter","setRippleCenter","showRipple","setShowRipple","selectedEdges","setSelectedEdges","gridSize","cols","Math","ceil","window","innerWidth","rows","innerHeight","dots","push","timer","setTimeout","sqrt","clearTimeout","patternOffset","patternSize","dotSize","handleDoubleClick","event","preventDefault","stopPropagation","reactFlowBounds","currentTarget","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","dotX","round","dotY","newPosition","newNodeId","Date","now","toString","newNode","type","content","onRemove","n","edgeTypes","onConnect","params","animated","nodeTypes","custom","onEdgeClick","edge","prev","includes","processedEdges","map","isSelected","onPaneClick","nodeCount","length","i","distance","cx","cy","r","patternUnits","fillOpacity","onDoubleClick","zoomOnDoubleClick","fitView","onNodeDragStart","_","node","isDragging","onNodeDragStop","onMove","viewState","connectionLineComponent","viewBox","refX","refY","markerWidth","markerHeight","orient","_c7","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState,\n  Controls,\n  MarkerType,\n  getSmoothStepPath\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\nimport CustomEdge from './CustomEdge';\nimport CustomConnectionLine from './CustomConnectionLine';\n\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.4;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n\n// Fix styled component using a transient prop\nconst AnimatedComponent = styled.div`\n  animation: ${props => props.$delay ? `fadeIn ${props.$delay}s` : 'none'};\n  // other styles...\n`;\n\n// Fix the edge implementation (rename or replace the existing one)\nconst TerminalEdge = ({ \n  id, \n  source, \n  target, \n  sourceX, \n  sourceY, \n  targetX, \n  targetY,\n  sourcePosition,\n  targetPosition,\n  data,\n  style = {} \n}) => {\n  // Calculate the path\n  const [edgePath, labelX, labelY] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    borderRadius: 16,\n  });\n\n  return (\n    <>\n      {/* Optional glow effect layer */}\n      <path\n        style={{\n          stroke: 'rgba(14, 249, 40, 0.2)',\n          strokeWidth: 6,\n          filter: 'blur(4px)',\n        }}\n        d={edgePath}\n        fill=\"none\"\n      />\n      {/* Main edge path */}\n      <path\n        id={id}\n        style={{\n          stroke: '#0EF928',\n          strokeWidth: 2,\n          strokeDasharray: '5,5',\n          ...style,\n        }}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd=\"url(#terminal-arrow)\"\n        fill=\"none\"\n      />\n      \n      {/* Optional label */}\n      {data?.label && (\n        <foreignObject\n          width={100}\n          height={40}\n          x={labelX - 50}\n          y={labelY - 20}\n          className=\"edgebutton-foreignobject\"\n          requiredExtensions=\"http://www.w3.org/1999/xhtml\"\n        >\n          <div\n            style={{\n              background: '#000',\n              color: '#0EF928',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              fontFamily: 'VT323, monospace',\n              fontSize: '14px',\n              border: '1px solid #0EF928',\n              textAlign: 'center',\n              boxShadow: '0 0 8px rgba(14, 249, 40, 0.5)',\n            }}\n          >\n            {data.label}\n          </div>\n        </foreignObject>\n      )}\n    </>\n  );\n};\n\nconst Whiteboard = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n  const [selectedEdges, setSelectedEdges] = useState([]);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({ x, y });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n\n  const handleDoubleClick = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n\n    setRippleCenter({ \n      x: (dotX * zoom) + position.x,\n      y: (dotY * zoom) + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom,\n    };\n\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: { \n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n\n  // Define edge types with our renamed component\n  const edgeTypes = useMemo(() => ({\n    terminal: TerminalEdge\n  }), []);\n  \n  // Updated onConnect to use the renamed edge type\n  const onConnect = useCallback((params) => {\n    setEdges(edges => [\n      ...edges,\n      {\n        ...params,\n        type: 'terminal', // Use renamed edge type\n        animated: true,\n        data: {\n          label: 'connection'\n        },\n        style: {\n          stroke: '#0EF928',\n          strokeDasharray: '5,5',\n        },\n      }\n    ]);\n  }, []);\n\n  // Memoize nodeTypes and edgeTypes to prevent recreation on each render\n  const nodeTypes = useMemo(() => ({ \n    custom: CustomNode \n  }), []);\n\n  // Handle edge click\n  const onEdgeClick = useCallback((event, edge) => {\n    event.stopPropagation();\n    setSelectedEdges(prev => \n      prev.includes(edge.id) \n        ? prev.filter(id => id !== edge.id) \n        : [...prev, edge.id]\n    );\n  }, []);\n  \n  // Process edges with selection state\n  const processedEdges = useMemo(() => {\n    return edges.map(edge => {\n      const isSelected = selectedEdges.includes(edge.id);\n      return {\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: isSelected ? '#ffffff' : '#0EF928',\n          strokeWidth: isSelected ? 3 : 2,\n          filter: isSelected \n            ? 'drop-shadow(0 0 12px rgba(255, 255, 255, 0.7))' \n            : 'drop-shadow(0 0 8px rgba(14, 249, 40, 0.5))',\n        },\n      };\n    });\n  }, [edges, selectedEdges]);\n  \n  // Handle canvas click to clear selection\n  const onPaneClick = useCallback(() => {\n    setSelectedEdges([]);\n  }, []);\n\n  return (\n    <WhiteboardContainer>\n      <VignetteOverlay />\n      <Navbar nodeCount={nodes.length} />\n      {isLoading ? (\n        <LoadingGrid>\n          <svg width=\"100%\" height=\"100%\">\n            {dots.map(({ x, y }, i) => {\n              const distance = Math.sqrt(x * x + y * y);\n              return (\n                <LoadingDot\n                  key={`${x}-${y}`}\n                  cx={x * 24 + 1}\n                  cy={y * 24 + 1}\n                  r={1}\n                  fill=\"#ababab\"\n                  delay={distance * 0.05}\n                />\n              );\n            })}\n          </svg>\n        </LoadingGrid>\n      ) : (\n        <DotGrid>\n          <svg>\n            <defs>\n              <pattern \n                id=\"dot-pattern\" \n                x={patternOffset.x} \n                y={patternOffset.y} \n                width={patternSize} \n                height={patternSize} \n                patternUnits=\"userSpaceOnUse\"\n              >\n                <circle \n                  cx={dotSize} \n                  cy={dotSize} \n                  r={dotSize} \n                  fill=\"#ababab\" \n                  fillOpacity=\"0.4\"\n                />\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#dot-pattern)\" />\n          </svg>\n        </DotGrid>\n      )}\n      <ReactFlow\n        nodes={nodes}\n        edges={processedEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onEdgeClick={onEdgeClick}\n        onPaneClick={onPaneClick}\n        nodeTypes={nodeTypes}\n        edgeTypes={edgeTypes}\n        onDoubleClick={handleDoubleClick}\n        zoomOnDoubleClick={false}\n        fitView={false}\n        style={{ width: '100%', height: '100%' }}\n        onNodeDragStart={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: true }}\n                : n\n            )\n          );\n        }}\n        onNodeDragStop={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: false }}\n                : n\n            )\n          );\n        }}\n        onMove={(_, viewState) => {\n          setPosition({ x: viewState.x, y: viewState.y });\n          setZoom(viewState.zoom);\n        }}\n        connectionLineComponent={CustomConnectionLine}\n      >\n        <Controls />\n        \n        {/* Add SVG defs for custom markers */}\n        <svg style={{ position: 'absolute', width: 0, height: 0 }}>\n          <defs>\n            <marker\n              id=\"terminal-arrow\"\n              viewBox=\"0 0 10 10\"\n              refX=\"8\"\n              refY=\"5\"\n              markerWidth=\"6\"\n              markerHeight=\"6\"\n              orient=\"auto-start-reverse\"\n            >\n              <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"#0EF928\" />\n            </marker>\n          </defs>\n        </svg>\n        \n        {/* Add keyframe animation */}\n        <style>\n          {`\n            @keyframes flowAnimation {\n              from {\n                stroke-dashoffset: 20;\n              }\n              to {\n                stroke-dashoffset: 0;\n              }\n            }\n            \n            .react-flow__edge-path {\n              animation: flowAnimation 1s linear infinite;\n            }\n          `}\n        </style>\n      </ReactFlow>\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}