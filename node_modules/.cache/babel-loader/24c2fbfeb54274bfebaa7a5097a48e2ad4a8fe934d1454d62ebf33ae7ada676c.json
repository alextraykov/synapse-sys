{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\n_c = WhiteboardContainer;\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\n_c2 = DotGrid;\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n_c3 = LoadingGrid;\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.1;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\n_c4 = LoadingDot;\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\n_c5 = RippleDot;\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n_c6 = VignetteOverlay;\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst Whiteboard = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({\n        x,\n        y\n      });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n  const handleDoubleClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n    setRippleCenter({\n      x: dotX * zoom + position.x,\n      y: dotY * zoom + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom\n    };\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: {\n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n  const onConnect = useCallback(params => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  // Add ripple effect to the grid\n  const renderRipple = () => {\n    if (!showRipple || !rippleCenter) return null;\n    const rippleDots = [];\n    for (let y = -3; y <= 2; y++) {\n      for (let x = -3; x <= 2; x++) {\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance <= 3) {\n          rippleDots.push(/*#__PURE__*/_jsxDEV(RippleDot, {\n            cx: rippleCenter.x + x * 24 * zoom,\n            cy: rippleCenter.y + y * 24 * zoom,\n            r: dotSize,\n            delay: distance * 0.05\n          }, `ripple-${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n    return rippleDots;\n  };\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(VignetteOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      nodeCount: nodes.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoadingGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        children: dots.map(({\n          x,\n          y\n        }, i) => {\n          const distance = Math.sqrt(x * x + y * y);\n          return /*#__PURE__*/_jsxDEV(LoadingDot, {\n            cx: x * 24 + 1,\n            cy: y * 24 + 1,\n            r: 1,\n            fill: \"#ababab\",\n            delay: distance * 0.05\n          }, `${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DotGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"dot-pattern\",\n            x: patternOffset.x,\n            y: patternOffset.y,\n            width: patternSize,\n            height: patternSize,\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: dotSize,\n              cy: dotSize,\n              r: dotSize,\n              fill: \"#ababab\",\n              fillOpacity: \"0.4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"url(#dot-pattern)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), renderRipple()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      onDoubleClick: handleDoubleClick,\n      zoomOnDoubleClick: false,\n      fitView: false,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onNodeDragStart: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: true\n          }\n        } : n));\n      },\n      onNodeDragStop: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: false\n          }\n        } : n));\n      },\n      onMove: (_, viewState) => {\n        setPosition({\n          x: viewState.x,\n          y: viewState.y\n        });\n        setZoom(viewState.zoom);\n      },\n      children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"tPGnp6zHZUFH8NH/5kMQu7Et+lU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c7 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"DotGrid\");\n$RefreshReg$(_c3, \"LoadingGrid\");\n$RefreshReg$(_c4, \"LoadingDot\");\n$RefreshReg$(_c5, \"RippleDot\");\n$RefreshReg$(_c6, \"VignetteOverlay\");\n$RefreshReg$(_c7, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","useNodesState","useEdgesState","Controls","styled","CustomNode","Navbar","jsxDEV","_jsxDEV","WhiteboardContainer","div","props","theme","terminal","bg","_c","DotGrid","_c2","LoadingGrid","_c3","LoadingDot","circle","delay","_c4","RippleDot","_c5","VignetteOverlay","_c6","nodeTypes","custom","Whiteboard","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","position","setPosition","x","y","zoom","setZoom","isLoading","setIsLoading","rippleCenter","setRippleCenter","showRipple","setShowRipple","gridSize","cols","Math","ceil","window","innerWidth","rows","innerHeight","dots","push","timer","setTimeout","sqrt","clearTimeout","patternOffset","patternSize","dotSize","handleDoubleClick","event","preventDefault","stopPropagation","reactFlowBounds","currentTarget","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","dotX","round","dotY","newPosition","newNodeId","Date","now","toString","newNode","id","type","data","content","onRemove","filter","n","onConnect","params","renderRipple","rippleDots","distance","cx","cy","r","fileName","_jsxFileName","lineNumber","columnNumber","children","nodeCount","length","width","height","map","i","fill","patternUnits","fillOpacity","onDoubleClick","zoomOnDoubleClick","fitView","style","onNodeDragStart","_","node","isDragging","onNodeDragStop","onMove","viewState","_c7","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState,\n  Controls\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport Navbar from './Navbar';\n\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.15s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    50% { \n      opacity: 1;\n      fill: #0EF928;\n      transform: scale(1.1);\n    }\n    100% { \n      opacity: 0.1;\n      fill: #ababab;\n      transform: scale(1);\n    }\n  }\n`;\n\n// Add new styled component for ripple effect\nconst RippleDot = styled.circle`\n  animation: rippleEffect 0.5s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n  \n  @keyframes rippleEffect {\n    0% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n    50% { \n      opacity: 0.5;\n      fill: #0EF928;\n    }\n    100% { \n      opacity: 0.2;\n      fill: #d2d2d2;\n    }\n  }\n`;\n\n// Add new styled component for vignette\nconst VignetteOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: radial-gradient(\n    circle at center,\n    transparent 0%,\n    transparent 60%,\n    rgba(0, 0, 0, 0.4) 100%\n  );\n  z-index: 1; // Above canvas but below navbar\n`;\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nconst Whiteboard = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [rippleCenter, setRippleCenter] = useState(null);\n  const [showRipple, setShowRipple] = useState(false);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({ x, y });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.05 + 0.15) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n\n  const handleDoubleClick = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    // Adjust click position based on canvas position and zoom\n    const clickX = (event.clientX - reactFlowBounds.left - position.x) / zoom;\n    const clickY = (event.clientY - reactFlowBounds.top - position.y) / zoom;\n\n    // Calculate which dot was closest to the click, accounting for dot center\n    const dotX = Math.round((clickX - 1) / 24) * 24 + 1;\n    const dotY = Math.round((clickY - 1) / 24) * 24 + 1;\n\n    setRippleCenter({ \n      x: (dotX * zoom) + position.x,\n      y: (dotY * zoom) + position.y\n    });\n    setShowRipple(true);\n\n    // Hide ripple after animation\n    setTimeout(() => {\n      setShowRipple(false);\n    }, 500);\n\n    // Create new node\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom,\n    };\n\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: { \n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n\n  const onConnect = useCallback((params) => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  // Add ripple effect to the grid\n  const renderRipple = () => {\n    if (!showRipple || !rippleCenter) return null;\n\n    const rippleDots = [];\n    for (let y = -3; y <= 2; y++) {\n      for (let x = -3; x <= 2; x++) {\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance <= 3) {\n          rippleDots.push(\n            <RippleDot\n              key={`ripple-${x}-${y}`}\n              cx={rippleCenter.x + ((x * 24) * zoom)}\n              cy={rippleCenter.y + ((y * 24) * zoom)}\n              r={dotSize}\n              delay={distance * 0.05}\n            />\n          );\n        }\n      }\n    }\n    return rippleDots;\n  };\n\n  return (\n    <WhiteboardContainer>\n      <VignetteOverlay />\n      <Navbar nodeCount={nodes.length} />\n      {isLoading ? (\n        <LoadingGrid>\n          <svg width=\"100%\" height=\"100%\">\n            {dots.map(({ x, y }, i) => {\n              const distance = Math.sqrt(x * x + y * y);\n              return (\n                <LoadingDot\n                  key={`${x}-${y}`}\n                  cx={x * 24 + 1}\n                  cy={y * 24 + 1}\n                  r={1}\n                  fill=\"#ababab\"\n                  delay={distance * 0.05}\n                />\n              );\n            })}\n          </svg>\n        </LoadingGrid>\n      ) : (\n        <DotGrid>\n          <svg>\n            <defs>\n              <pattern \n                id=\"dot-pattern\" \n                x={patternOffset.x} \n                y={patternOffset.y} \n                width={patternSize} \n                height={patternSize} \n                patternUnits=\"userSpaceOnUse\"\n              >\n                <circle \n                  cx={dotSize} \n                  cy={dotSize} \n                  r={dotSize} \n                  fill=\"#ababab\" \n                  fillOpacity=\"0.4\"\n                />\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#dot-pattern)\" />\n            {renderRipple()}\n          </svg>\n        </DotGrid>\n      )}\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        onDoubleClick={handleDoubleClick}\n        zoomOnDoubleClick={false}\n        fitView={false}\n        style={{ width: '100%', height: '100%' }}\n        onNodeDragStart={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: true }}\n                : n\n            )\n          );\n        }}\n        onNodeDragStop={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: false }}\n                : n\n            )\n          );\n        }}\n        onMove={(_, viewState) => {\n          setPosition({ x: viewState.x, y: viewState.y });\n          setZoom(viewState.zoom);\n        }}\n      >\n        <Controls />\n      </ReactFlow>\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}