{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/context/OverlayContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OverlayContext = /*#__PURE__*/createContext({\n  overlayContent: null,\n  showOverlay: () => {},\n  hideOverlay: () => {}\n});\nexport const OverlayProvider = ({\n  children\n}) => {\n  _s();\n  const [overlayContent, setOverlayContent] = useState(null);\n  const showOverlay = content => {\n    setOverlayContent(content);\n  };\n  const hideOverlay = () => {\n    setOverlayContent(null);\n  };\n  return /*#__PURE__*/_jsxDEV(OverlayContext.Provider, {\n    value: {\n      overlayContent,\n      showOverlay,\n      hideOverlay\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(OverlayProvider, \"m6DSrbkjYbFRYm7gyvGWAF5DtTQ=\");\n_c = OverlayProvider;\nexport const useOverlay = () => {\n  _s2();\n  const context = useContext(OverlayContext);\n  if (context === undefined) {\n    throw new Error('useOverlay must be used within an OverlayProvider');\n  }\n  return context;\n};\n_s2(useOverlay, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"OverlayProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","OverlayContext","overlayContent","showOverlay","hideOverlay","OverlayProvider","children","_s","setOverlayContent","content","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOverlay","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/context/OverlayContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst OverlayContext = createContext({\n  overlayContent: null,\n  showOverlay: () => {},\n  hideOverlay: () => {}\n});\n\nexport const OverlayProvider = ({ children }) => {\n  const [overlayContent, setOverlayContent] = useState(null);\n\n  const showOverlay = (content) => {\n    setOverlayContent(content);\n  };\n\n  const hideOverlay = () => {\n    setOverlayContent(null);\n  };\n\n  return (\n    <OverlayContext.Provider value={{ overlayContent, showOverlay, hideOverlay }}>\n      {children}\n    </OverlayContext.Provider>\n  );\n};\n\nexport const useOverlay = () => {\n  const context = useContext(OverlayContext);\n  if (context === undefined) {\n    throw new Error('useOverlay must be used within an OverlayProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,cAAc,gBAAGL,aAAa,CAAC;EACnCM,cAAc,EAAE,IAAI;EACpBC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACL,cAAc,EAAEM,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMK,WAAW,GAAIM,OAAO,IAAK;IAC/BD,iBAAiB,CAACC,OAAO,CAAC;EAC5B,CAAC;EAED,MAAML,WAAW,GAAGA,CAAA,KAAM;IACxBI,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACER,OAAA,CAACC,cAAc,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAET,cAAc;MAAEC,WAAW;MAAEC;IAAY,CAAE;IAAAE,QAAA,EAC1EA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACR,EAAA,CAhBWF,eAAe;AAAAW,EAAA,GAAfX,eAAe;AAkB5B,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,cAAc,CAAC;EAC1C,IAAIkB,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,UAAU;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}