{"ast":null,"code":"var _jsxFileName = \"/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\n_c = WhiteboardContainer;\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\n_c2 = DotGrid;\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n_c3 = LoadingGrid;\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.6s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { opacity: 0; }\n    50% { opacity: 0.4; }\n    100% { opacity: 0.2; }\n  }\n`;\n_c4 = LoadingDot;\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst Whiteboard = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({\n        x,\n        y\n      });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.2 + 0.6) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n  const handleDoubleClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom\n    };\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: {\n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n  const onConnect = useCallback(params => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContainer, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(LoadingGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        children: dots.map(({\n          x,\n          y\n        }, i) => {\n          const distance = Math.sqrt(x * x + y * y);\n          return /*#__PURE__*/_jsxDEV(LoadingDot, {\n            cx: x * 24 + 1,\n            cy: y * 24 + 1,\n            r: 1,\n            fill: \"#d2d2d2\",\n            delay: distance * 0.2\n          }, `${x}-${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DotGrid, {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: \"dot-pattern\",\n            x: patternOffset.x,\n            y: patternOffset.y,\n            width: patternSize,\n            height: patternSize,\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: dotSize,\n              cy: dotSize,\n              r: dotSize,\n              fill: \"#d2d2d2\",\n              fillOpacity: \"0.2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"100%\",\n          height: \"100%\",\n          fill: \"url(#dot-pattern)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      onDoubleClick: handleDoubleClick,\n      zoomOnDoubleClick: false,\n      fitView: false,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onNodeDragStart: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: true\n          }\n        } : n));\n      },\n      onNodeDragStop: (_, node) => {\n        setNodes(nodes => nodes.map(n => n.id === node.id ? {\n          ...n,\n          data: {\n            ...n.data,\n            isDragging: false\n          }\n        } : n));\n      },\n      onMove: (_, viewState) => {\n        setPosition({\n          x: viewState.x,\n          y: viewState.y\n        });\n        setZoom(viewState.zoom);\n      },\n      children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"cwQECzDSsUaZ1hmTMZuRtLr6bPk=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c5 = Whiteboard;\nexport default Whiteboard;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"WhiteboardContainer\");\n$RefreshReg$(_c2, \"DotGrid\");\n$RefreshReg$(_c3, \"LoadingGrid\");\n$RefreshReg$(_c4, \"LoadingDot\");\n$RefreshReg$(_c5, \"Whiteboard\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","useNodesState","useEdgesState","Controls","styled","CustomNode","jsxDEV","_jsxDEV","WhiteboardContainer","div","props","theme","terminal","bg","_c","DotGrid","_c2","LoadingGrid","_c3","LoadingDot","circle","delay","_c4","nodeTypes","custom","Whiteboard","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","position","setPosition","x","y","zoom","setZoom","isLoading","setIsLoading","gridSize","cols","Math","ceil","window","innerWidth","rows","innerHeight","dots","push","timer","setTimeout","sqrt","clearTimeout","patternOffset","patternSize","dotSize","handleDoubleClick","event","preventDefault","stopPropagation","reactFlowBounds","currentTarget","getBoundingClientRect","newPosition","clientX","left","clientY","top","newNodeId","Date","now","toString","newNode","id","type","data","content","onRemove","filter","n","onConnect","params","children","width","height","map","i","distance","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","patternUnits","fillOpacity","onDoubleClick","zoomOnDoubleClick","fitView","style","onNodeDragStart","_","node","isDragging","onNodeDragStop","onMove","viewState","_c5","$RefreshReg$"],"sources":["/Users/alexandertraykov/Documents/Documents/synapse-sys/src/components/Whiteboard.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState,\n  Controls\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport styled from 'styled-components';\nimport { CustomNode } from './NodeInput';\n\nconst WhiteboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  background: ${props => props.theme.terminal.bg};\n`;\n\n// Create an SVG pattern for infinite dots\nconst DotGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n// Add a component for the initial loading animation\nconst LoadingGrid = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n`;\n\nconst LoadingDot = styled.circle`\n  opacity: 0;\n  animation: fadeInDot 0.6s ease-out forwards;\n  animation-delay: ${props => props.delay}s;\n\n  @keyframes fadeInDot {\n    0% { opacity: 0; }\n    50% { opacity: 0.4; }\n    100% { opacity: 0.2; }\n  }\n`;\n\nconst nodeTypes = {\n  custom: CustomNode\n};\n\nconst Whiteboard = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Calculate grid dimensions based on viewport\n  const gridSize = {\n    cols: Math.ceil(window.innerWidth / 24) + 1,\n    rows: Math.ceil(window.innerHeight / 24) + 1\n  };\n\n  // Create array of dots for loading animation\n  const dots = [];\n  for (let y = 0; y < gridSize.rows; y++) {\n    for (let x = 0; x < gridSize.cols; x++) {\n      dots.push({ x, y });\n    }\n  }\n\n  // Switch to infinite grid after animation\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, (Math.sqrt(gridSize.cols * gridSize.cols + gridSize.rows * gridSize.rows) * 0.2 + 0.6) * 1000);\n    return () => clearTimeout(timer);\n  }, [gridSize.cols, gridSize.rows]);\n\n  // Calculate pattern offset based on canvas position\n  const patternOffset = {\n    x: position.x % (24 * zoom),\n    y: position.y % (24 * zoom)\n  };\n\n  // Update pattern size based on zoom\n  const patternSize = 24 * zoom;\n  const dotSize = 1 * zoom;\n\n  const handleDoubleClick = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const newPosition = {\n      x: (event.clientX - reactFlowBounds.left - position.x) / zoom,\n      y: (event.clientY - reactFlowBounds.top - position.y) / zoom,\n    };\n\n    const newNodeId = Date.now().toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: newPosition,\n      data: { \n        content: '',\n        onRemove: () => {\n          setNodes(nodes => nodes.filter(n => n.id !== newNodeId));\n        }\n      }\n    };\n\n    setNodes(nodes => [...nodes, newNode]);\n  }, [position, zoom]);\n\n  const onConnect = useCallback((params) => {\n    setEdges(edges => [...edges, params]);\n  }, []);\n\n  return (\n    <WhiteboardContainer>\n      {isLoading ? (\n        <LoadingGrid>\n          <svg width=\"100%\" height=\"100%\">\n            {dots.map(({ x, y }, i) => {\n              const distance = Math.sqrt(x * x + y * y);\n              return (\n                <LoadingDot\n                  key={`${x}-${y}`}\n                  cx={x * 24 + 1}\n                  cy={y * 24 + 1}\n                  r={1}\n                  fill=\"#d2d2d2\"\n                  delay={distance * 0.2}\n                />\n              );\n            })}\n          </svg>\n        </LoadingGrid>\n      ) : (\n        <DotGrid>\n          <svg>\n            <defs>\n              <pattern \n                id=\"dot-pattern\" \n                x={patternOffset.x} \n                y={patternOffset.y} \n                width={patternSize} \n                height={patternSize} \n                patternUnits=\"userSpaceOnUse\"\n              >\n                <circle \n                  cx={dotSize} \n                  cy={dotSize} \n                  r={dotSize} \n                  fill=\"#d2d2d2\" \n                  fillOpacity=\"0.2\" \n                />\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#dot-pattern)\" />\n          </svg>\n        </DotGrid>\n      )}\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        onDoubleClick={handleDoubleClick}\n        zoomOnDoubleClick={false}\n        fitView={false}\n        style={{ width: '100%', height: '100%' }}\n        onNodeDragStart={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: true }}\n                : n\n            )\n          );\n        }}\n        onNodeDragStop={(_, node) => {\n          setNodes(nodes => \n            nodes.map(n => \n              n.id === node.id \n                ? { ...n, data: { ...n.data, isDragging: false }}\n                : n\n            )\n          );\n        }}\n        onMove={(_, viewState) => {\n          setPosition({ x: viewState.x, y: viewState.y });\n          setZoom(viewState.zoom);\n        }}\n      >\n        <Controls />\n      </ReactFlow>\n    </WhiteboardContainer>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}